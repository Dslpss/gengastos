#!/usr/bin/env node

/**
 * Script para verificar se todas as vari√°veis de ambiente est√£o configuradas corretamente
 */

import dotenv from 'dotenv';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Carregar vari√°veis de ambiente
dotenv.config({ path: join(__dirname, '../../.env') });

console.log('üîç Verificando Configura√ß√£o de Vari√°veis de Ambiente...\n');

// Vari√°veis obrigat√≥rias do backend
const requiredEnvVars = {
  'SUPABASE_URL': process.env.SUPABASE_URL,
  'SUPABASE_SERVICE_KEY': process.env.SUPABASE_SERVICE_KEY,
  'DATABASE_URL': process.env.DATABASE_URL,
  'DB_HOST': process.env.DB_HOST,
  'DB_PORT': process.env.DB_PORT,
  'DB_NAME': process.env.DB_NAME,
  'DB_USER': process.env.DB_USER,
  'DB_PASSWORD': process.env.DB_PASSWORD,
  'JWT_SECRET': process.env.JWT_SECRET,
  'CORS_ORIGIN': process.env.CORS_ORIGIN,
  'PORT': process.env.PORT,
  'NODE_ENV': process.env.NODE_ENV
};

let hasErrors = false;

console.log('üìã Status das Vari√°veis de Ambiente:');
console.log('=====================================\n');

Object.entries(requiredEnvVars).forEach(([key, value]) => {
  const status = value ? '‚úÖ' : '‚ùå';
  const displayValue = value ? 
    (key.includes('KEY') || key.includes('PASSWORD') || key.includes('SECRET') ? 
      `${value.substring(0, 10)}...` : value) : 
    'N√ÉO DEFINIDA';
  
  console.log(`${status} ${key.padEnd(20)}: ${displayValue}`);
  
  if (!value) {
    hasErrors = true;
  }
});

console.log('\n=====================================\n');

if (hasErrors) {
  console.log('‚ùå ERRO: Algumas vari√°veis obrigat√≥rias n√£o est√£o definidas!');
  console.log('üìù Para corrigir:');
  console.log('   1. Verifique se o arquivo .env existe na pasta backend/');
  console.log('   2. Copie o arquivo .env.example se necess√°rio');
  console.log('   3. Configure todas as vari√°veis obrigat√≥rias');
  console.log('   4. Reinicie o servidor');
  process.exit(1);
} else {
  console.log('‚úÖ Todas as vari√°veis obrigat√≥rias est√£o configuradas!');
  console.log('üöÄ O servidor pode ser iniciado com seguran√ßa.');
}

// Teste de conex√£o b√°sico
console.log('\nüîó Testando URLs...');

try {
  const supabaseUrl = new URL(process.env.SUPABASE_URL);
  console.log(`‚úÖ SUPABASE_URL v√°lida: ${supabaseUrl.hostname}`);
} catch (error) {
  console.log('‚ùå SUPABASE_URL inv√°lida:', error.message);
  hasErrors = true;
}

if (process.env.CORS_ORIGIN) {
  try {
    const corsUrl = new URL(process.env.CORS_ORIGIN);
    console.log(`‚úÖ CORS_ORIGIN v√°lida: ${corsUrl.hostname}`);
  } catch (error) {
    console.log('‚ùå CORS_ORIGIN inv√°lida:', error.message);
  }
}

console.log('\nüîí Verifica√ß√£o de Seguran√ßa:');
if (process.env.JWT_SECRET === 'your_jwt_secret_key') {
  console.log('‚ö†Ô∏è  AVISO: JWT_SECRET usando valor padr√£o. Altere para produ√ß√£o!');
}

if (process.env.DB_PASSWORD && process.env.DB_PASSWORD.length < 8) {
  console.log('‚ö†Ô∏è  AVISO: Senha do banco muito simples. Use senha mais forte!');
}

console.log('\nüéâ Verifica√ß√£o conclu√≠da!\n');
